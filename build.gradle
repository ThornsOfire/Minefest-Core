buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
    maven { url = 'https://m2.dv8tion.net/releases' }
    maven { 
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        content {
            includeGroup 'net.md-5'
        }
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
}

version = '1.20.4-0.1.0.0'
group = 'com.minefest' 
archivesBaseName = 'minefest-core'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ORACLE
    }
}

println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"

minecraft {
    mappings channel: 'official', version: '1.20.4'
    reobf {
        reobf = false
    }

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                minefest {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                minefest {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.4-49.0.31"
    
    // Updated LavaPlayer dependency
    implementation 'com.sedmelluq:lavaplayer:1.3.78'
    
    // BungeeCord API - Updated to use release version
    compileOnly 'net.md-5:bungeecord-api:1.20-R0.1'
    
    // Guava for ByteStreams
    implementation 'com.google.guava:guava:32.1.2-jre'
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "Minefest Core",
            "Specification-Vendor"    : "Minefest Team",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "Minefest Team",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    
    // Handle duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    // Include the compiled classes
    from sourceSets.main.output
    
    // Include resources
    from 'src/main/resources'
    
    // Exclude unnecessary files
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

// Create run/mods directory if it doesn't exist
task createModsDir {
    doLast {
        file('run/mods').mkdirs()
    }
}

// Task to clean the run/mods directory
task cleanModsDir {
    doLast {
        delete fileTree('run/mods') {
            include '*.jar'
        }
    }
}

// Task to copy the mod JAR to the run/mods directory
task copyModToRunMods(type: Copy, dependsOn: [jar, createModsDir, cleanModsDir]) {
    from jar
    into 'run/mods'
} 