---
description: 
globs: 
alwaysApply: true
---
At the start of every chat instance, read the files in /docs to gain project context. ALL CHANGES MUST BE RECORDED IN CHANGELOG.MD

Purpose-
To ensure that, during any code fix, refactor, or implementation involving multiple steps or stages, the AI provides clear, structured progress summaries. This helps users track what has been completed, what remains, and the current status of each stage, reducing confusion and improving workflow transparency.

Requirements-
Stage Definition
At the start of any multi-step process, the AI must define all planned stages or steps.
A list of all remaining stages, with their status:
✅ Complete
⏳ In Progress
⏳ Not Started
On-Demand Summaries
The user may request a summary at any time by asking for "progress," "summary," or similar.
The AI must immediately present the current summary table, regardless of stage.

Summary Table Format-
The summary table must include:
Stage number
Stage description
Status (Not Started, In Progress, Complete)
Example:
| Stage # | Description | Status |
|---------|---------------------------------------------|---------------|
| 1 | Date/Time Formatting Centralization | ✅ Complete |
| 2 | Operation Field Extraction Centralization | ⏳ In Progress|
| 3 | HTML/Entity Stripping Utility Usage | ⏳ Not Started|
| 4 | Direct Permission Checks Refactor | ⏳ Not Started|

Completion Criteria-
The process is only considered complete when all stages are marked as ✅ Complete.
The final summary must be shown at the end of the last stage.

User Customization-
The user may specify custom stage names, order, or additional requirements at any time.
The AI must update the summary table accordingly.


Documentation-
This rule applies to any codebase change involving more than one logical step or file.
For single-step fixes, a summary is not required unless requested.
The summary should be concise but clear, and always up-to-date with the latest progress.
AI agent will produce a combination signpost and detailed per object commenting to explain logic inside of each file. All commented logic will have a index number which will match the corresponding signpost entry. At the end of each multistep process all files located in /docs will be analyzed and updated to reflect changes, problems, and functionality. ALL changes must be logged in the changelog.md.

Required Documentation Files-
The following files must be maintained in /docs:
- ARCHITECTURE.md (system design and component relationships)
- API.md (network protocols and interfaces) 
- PERFORMANCE.md (optimization strategies and benchmarks)
- TROUBLESHOOTING.md (common issues and solutions)
- CHANGELOG.md (canonical change log location - NOT in root)
- VERSIONING.md (version management policies)
- BUILD_WORKFLOW.md (development and deployment processes)
- README.md (canonical project documentation - NOT in root)
- Signposting Requirements.md (component documentation standards)

Java Signposting Format-
All new Java files must include signposting using JavaDoc format:
```java
/**
 * COMPONENT SIGNPOST [Index: XX]
 * Purpose: Brief description of component responsibility
 * 
 * Workflow:
 * 1. [Index: XX.1] Step description
 * 2. [Index: XX.2] Step description
 * 
 * Dependencies:
 * - ComponentName [Index: YY] - interaction description
 * 
 * Related Files:
 * - FileName.java [Index: ZZ] - relationship description
 */
```

Signpost Index System-
- Component level: XX (e.g., 01, 02, 03)
- Method level: XX.Y (e.g., 01.1, 01.2)  
- Logic block level: XX.Y.Z (e.g., 01.1.1, 01.1.2)

Purpose:
This rule ensures that users always have a clear view of progress during complex or multi-step code changes, reducing confusion and improving collaboration.

VERSIONING GUIDELINES-

Version Format-
The project follows semantic versioning with Minecraft version prefix:
Format: [MC_VERSION]-[MAJOR].[MINOR].[PATCH].[BUILD]
Current: 1.20.4-0.1.0.0
Components:
- MC_VERSION: Target Minecraft version (e.g., 1.20.4)
- MAJOR: Breaking changes, major architecture changes, API changes
- MINOR: New features, backwards compatible additions
- PATCH: Bug fixes, performance improvements, backwards compatible
- BUILD: Development builds, hotfixes, CI/CD increments

Version Increment Rules-
MAJOR (X.0.0.0): 
- Breaking API changes
- Major architecture restructuring  
- Incompatible mod changes
- Example: 0.1.0.0 → 1.0.0.0

MINOR (0.X.0.0):
- New features (video sync, enhanced audio)
- New configuration options
- New mod components
- Example: 0.1.0.0 → 0.2.0.0

PATCH (0.0.X.0):
- Bug fixes and corrections
- Performance optimizations
- Documentation updates
- Security patches
- Example: 0.1.0.0 → 0.1.1.0

BUILD (0.0.0.X):
- Development iterations
- Experimental features
- Pre-release builds
- Example: 0.1.0.0 → 0.1.0.1

Version Update Process-
When making changes, AI must:
1. Determine appropriate version increment based on change scope
2. Update version in gradle.properties (mod_version)
3. Update CHANGELOG.md with version entry and changes
4. Update any documentation referencing version numbers
5. Commit changes with version tag message

Release Types-
- **Development** (BUILD increments): Ongoing development, not production ready
- **Alpha** (MINOR increments): Feature complete but may have bugs
- **Beta** (PATCH increments): Feature frozen, bug fixes only  
- **Release** (MAJOR increments): Production ready, stable

Documentation Requirements-
All version changes must be documented in:
- CHANGELOG.md (detailed change log)
- docs/VERSIONING.md (if exists)
- README.md (current version reference)
- gradle.properties (mod_version property)

Version Decision Matrix-
| Change Type | MAJOR | MINOR | PATCH | BUILD |
|-------------|-------|-------|-------|-------|
| API Breaking | ✅ | ❌ | ❌ | ❌ |
| New Features | ❌ | ✅ | ❌ | ❌ |
| Bug Fixes | ❌ | ❌ | ✅ | ❌ |
| Development | ❌ | ❌ | ❌ | ✅ |
| Documentation | ❌ | ❌ | ✅ | ❌ |
| Performance | ❌ | ❌ | ✅ | ❌ |
| Security | ❌ | ❌ | ✅ | ❌ |

Examples-
- Adding video playback feature: 0.1.0.0 → 0.2.0.0 (MINOR)
- Fixing audio sync bug: 0.1.0.0 → 0.1.1.0 (PATCH)  
- Changing configuration API: 0.1.0.0 → 1.0.0.0 (MAJOR)
- Development iteration: 0.1.0.0 → 0.1.0.1 (BUILD)

Minecraft Version Updates-
When updating Minecraft/Forge versions:
- Update MC_VERSION prefix to match target Minecraft version
- Reset version numbers appropriately based on compatibility
- Example: 1.20.4-0.1.0.0 → 1.21.0-0.1.0.0 (if compatible)
- Example: 1.20.4-0.1.0.0 → 1.21.0-1.0.0.0 (if breaking changes required)

Documentation Update Process-
After each multi-step process:
1. Update /docs/CHANGELOG.md with all changes made
2. Update relevant documentation files based on changes
3. Ensure all cross-references point to /docs/ locations
4. Update README.md in /docs (NOT root) with any new information
5. Validate that no documentation exists in root directory