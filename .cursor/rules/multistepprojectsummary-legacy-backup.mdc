---
description: 
globs: 
alwaysApply: false
---
# Minefest-Core Project Rules

## üö® CRITICAL PROJECT REQUIREMENTS

At the start of every new conversation you MUST read /docs/MASTERKEY.MD

This file will provide you with a synopsys of all documents required for current stage.

### ü§ñ AUTOMATION-FIRST DEVELOPMENT
**NEVER suggest manual Java commands. ALWAYS use Gradle automations.**

**Required Commands:**
- `./gradlew buildAll` - Build and deploy to both environments
- `./gradlew runServer` - Start development server with auto-rebuild
- `./gradlew runClient` - Start development client
- `./gradlew incrementPatch|incrementMinor|incrementMajor` - Version updates
- Emergency Process Protocol - Stop hanging processes (preserves Gradle daemon)

**FORBIDDEN Commands:**
- Manual Java commands (`java -jar`, `javac`)
- Manual JAR copying (`copy build/libs/*.jar`)
- Manual environment setup
- Manual version editing across multiple files

**Reference Documentation:** `docs/AI_ASSISTANT_AUTOMATION_GUIDE.md`

### üîí CODE LOCKING AWARENESS
**Check `docs/CODE_LOCKING_PROTOCOL.md` before ANY code modifications.**

**Lock Status Rules:**
- üîí **LOCKED**: NO changes without explicit user approval
- ‚ö†Ô∏è **REVIEW REQUIRED**: Changes need justification
- ‚úÖ **UNLOCKED**: Free to modify

**Currently Locked Components:**
- Version Automation System (build.gradle tasks)
- Build System Components (Java toolchain, JVM args, repositories)
- Configuration System [Index: 10] (TOML boolean fix)
- MasterClock System [Index: 01] (timing critical)
- Server Startup Sequence [Index: 02] (zero crashes)

### üìÅ PROJECT CONTEXT
**Project:** Minefest-Core v1.20.4-0.1.3.3
**Status:** Minecraft music festival platform mod
**Current Stage:** Stage 3 (GUI & User Interface) - 100% Complete
**Next Phase:** Stage 4 (Audio Integration & Streaming)

## MULTI-STEP PROJECT SUMMARY SYSTEM

### Purpose
To ensure that, during any code fix, refactor, or implementation involving multiple steps or stages, the AI provides clear, structured progress summaries. This helps users track what has been completed, what remains, and the current status of each stage, reducing confusion and improving workflow transparency.

### Requirements

#### Stage Definition
At the start of any multi-step process, the AI must define all planned stages or steps.
A list of all remaining stages, with their status:
- ‚úÖ Complete
- ‚è≥ In Progress
- ‚è≥ Not Started

#### On-Demand Summaries
The user may request a summary at any time by asking for "progress," "summary," or similar.
The AI must immediately present the current summary table, regardless of stage.

#### Summary Table Format
The summary table must include:
- Stage number
- Stage description  
- Status (Not Started, In Progress, Complete)

Example:
| Stage # | Description | Status |
|---------|---------------------------------------------|---------------|
| 1 | Date/Time Formatting Centralization | ‚úÖ Complete |
| 2 | Operation Field Extraction Centralization | ‚è≥ In Progress|
| 3 | HTML/Entity Stripping Utility Usage | ‚è≥ Not Started|
| 4 | Direct Permission Checks Refactor | ‚è≥ Not Started|

#### Completion Criteria
The process is only considered complete when all stages are marked as ‚úÖ Complete.
The final summary must be shown at the end of the last stage.

#### User Customization
The user may specify custom stage names, order, or additional requirements at any time.
The AI must update the summary table accordingly.

### Documentation Requirements
This rule applies to any codebase change involving more than one logical step or file.
For single-step fixes, a summary is not required unless requested.
The summary should be concise but clear, and always up-to-date with the latest progress.

## COMPONENT DOCUMENTATION SYSTEM

### Signposting Requirements
AI agent will produce a combination signpost and detailed per object commenting to explain logic inside of each file. All commented logic in the main body of the code will have an index number which will match the corresponding signpost entry. Commented logic must be detailed explaining function, linking, dependencies, etc.

### Java Signposting Format
All new Java files must include signposting using JavaDoc format:
```java
/**
 * COMPONENT SIGNPOST [Index: XX]
 * Purpose: Brief description of component responsibility
 * Side: DEDICATED_SERVER | CLIENT | COMMON
 * 
 * Workflow:
 * 1. [Index: XX.1] Step description
 * 2. [Index: XX.2] Step description
 * 
 * Dependencies:
 * - ComponentName [Index: YY] - interaction description
 * 
 * Related Files:
 * - FileName.java [Index: ZZ] - relationship description
 */
```

### Signpost Index System
- Component level: XX (e.g., 01, 02, 03)
- Method level: XX.Y (e.g., 01.1, 01.2)  
- Logic block level: XX.Y.Z (e.g., 01.1.1, 01.1.2)

**Current Index Assignments:**
- 01: MasterClock.java (timing authority) üîí LOCKED
- 02: MinefestCore.java (core initialization) üîí LOCKED  
- 03-13: Core systems (see docs/ARCHITECTURE.md)
- 15-17: Audio infrastructure blocks (Stage 1)
- 18-20: Block entities (Stage 2)
- 21-24: GUI systems (Stage 3)

## VERSIONING AUTOMATION SYSTEM

### Version Source of Truth
**Primary Location:** `gradle.properties` ‚Üí `mod_version`
**Current Version:** 1.20.4-0.1.3.3

### Automated Version Management
**NEVER manually edit version numbers.** Always use:
- `./gradlew incrementPatch` - Bug fixes, documentation (X.X.X.Y ‚Üí X.X.X.Y+1)
- `./gradlew incrementMinor` - New features, stage completion (X.X.Y.Z ‚Üí X.X.Y+1.0)
- `./gradlew incrementMajor` - Breaking changes (X.Y.Z.W ‚Üí X.Y+1.0.0)
- `./gradlew updateProjectVersions` - Manual sync after gradle.properties edit

### Version Format
Format: [MC_VERSION]-[MAJOR].[MINOR].[PATCH].[BUILD]
Components:
- MC_VERSION: Target Minecraft version (1.20.4)
- MAJOR: Breaking changes, major architecture changes
- MINOR: New features, stage completions
- PATCH: Bug fixes, performance improvements  
- BUILD: Development iterations, hotfixes

### Automatic Documentation Updates
Version automation updates:
- `docs/README.md` (version badges and references)
- `docs/CURRENT_DEVELOPMENT_STATUS.md` (current version)
- `docs/BUILD_WORKFLOW.md` (last updated version)
- `docs/CHANGELOG.md` (creates new entry template)
- `docs/TROUBLESHOOTING.md` (version references)

## REQUIRED DOCUMENTATION FILES

The following files must be maintained in `/docs`:

**Core Documentation:**
- `CHANGELOG.md` (canonical change log - ALL changes recorded here)
- `README.md` (canonical project documentation - NOT in root)
- `AI_ASSISTANT_AUTOMATION_GUIDE.md` (automation enforcement for AI assistants)
- `BUILD_WORKFLOW.md` (development and deployment processes)
- `CODE_LOCKING_PROTOCOL.md` (component protection system)

**Architecture Documentation:**
- `ARCHITECTURE.md` (system design and component relationships)
- `API.md` (network protocols and interfaces)
- `Signposting Requirements.md` (component documentation standards)
- `SERVER_CLIENT_SEPARATION.md` (side-specific development guide)

**Operational Documentation:**
- `TROUBLESHOOTING.md` (common issues and solutions)
- `PERFORMANCE.md` (optimization strategies and benchmarks)
- `VERSIONING.md` (version management policies)
- `PERMISSIONS.md` (LuckPerms integration guide)

**Development Documentation:**
- `CONTRIBUTING.md` (community contribution guide)
- `ROADMAP.md` (development stages and feature priorities)
- `CURRENT_DEVELOPMENT_STATUS.md` (stage tracking and progress)

## DEVELOPMENT WORKFLOW RULES

### Pre-Development Checklist
1. **Read Context:** Check `docs/CURRENT_DEVELOPMENT_STATUS.md` for current stage
2. **Check Locks:** Review `docs/CODE_LOCKING_PROTOCOL.md` for component status
3. **Use Automations:** Always use `./gradlew` commands, never manual Java
4. **Version Management:** Use automation for all version changes

### During Development
1. **Stage Tracking:** Maintain clear progress summaries for multi-step processes
2. **Signposting:** Add proper component documentation for all new Java files
3. **Lock Compliance:** Never modify üîí LOCKED components without user approval
4. **Environment Sync:** Use `./gradlew buildAll` to ensure dev/prod sync

### Post-Development
1. **Update CHANGELOG.md:** Record ALL changes with version entry
2. **Update Documentation:** Sync affected documentation files
3. **Version Update:** Use appropriate `./gradlew increment*` command
4. **Validation:** Ensure all cross-references point to `/docs/` locations

## ERROR HANDLING & TROUBLESHOOTING

### Build Issues
- **First Step:** Always try `./gradlew clean buildAll`
- **Hanging Processes:** Use `taskkill /F /IM java.exe`
- **Module Conflicts:** Gradle automation handles this automatically
- **Environment Sync:** `./gradlew buildAll` resolves sync issues

### Version Issues
- **Source of Truth:** `gradle.properties` is the primary version source
- **Sync Problems:** Use `./gradlew updateProjectVersions`
- **Manual Edits:** Never edit version numbers manually across files

### Code Lock Violations
- **Check Protocol:** Always consult `docs/CODE_LOCKING_PROTOCOL.md`
- **User Approval:** Required for ANY modifications to üîí LOCKED components
- **Justification:** Provide detailed reasoning for lock modification requests

## SUCCESS METRICS

### Automation Compliance
- ‚úÖ No manual Java command suggestions
- ‚úÖ All development through `./gradlew` commands  
- ‚úÖ Automatic environment synchronization
- ‚úÖ Version automation usage

### Documentation Quality
- ‚úÖ All changes recorded in CHANGELOG.md
- ‚úÖ Multi-step progress summaries provided
- ‚úÖ Component signposting maintained
- ‚úÖ Cross-references point to `/docs/`

### Project Stability
- ‚úÖ Code lock protocol respected
- ‚úÖ No unauthorized modifications to locked components
- ‚úÖ Version consistency across all files
- ‚úÖ Build system reliability maintained

---

**Last Updated:** 2025-05-23
**Current Project Version:** 1.20.4-0.1.3.3
**Rule Version:** 2.0 (Updated for automation-first development)